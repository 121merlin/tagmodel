%新闻标签标注动力机制及其应用研究
clear all;
close all;
clear source;%创建source结构体，包含相关变量和参数

[~,row]=xlsread('E:\MATLAB\model\TagData\G20.xlsx','新闻内容','d2:d16');
newscount=length(row);%话题中包含的新闻条数
circle=2000;%模型中第一步随机加标签的循环次数，可以人工调整
%模型变量初始化
for i=1:newscount
    source(i).content=char(row(i));%每条新闻内容
    source(i).tagslib='';%每条新闻的关键词
    fre=Word_frequency(source(i).content);%调用Word_frequency函数计算词频，并排序
    field={'tagsword','wordfre'};
    tags=cell2struct(fre,field,2);
    source(i).wordfre=[];%每条新闻的关键词对应的词频
    for j=1:size(tags,1)%构建关键词内容和词频的对应
        source(i).tagslib=strvcat(source(i).tagslib,tags(j).tagsword);
        source(i).wordfre=[source(i).wordfre;tags(j).wordfre];
    end;
    source(i).tagslength=length(tags);%每条新闻包含的关键词个数
    source(i).tag='';%每条新闻的标签组
    source(i).tagwordfre=[];%每条新闻的标签组对应的词频
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %标签信息价值模型和优先连接模型实现的随机加标签的相关参数
    [source(i).count_tag,source(i).tag_Ri]=deal(0);%count_tag：每个关键词在循环中被引用为标签的次数；tag_Ri：优先连接模型中的参数
    source(i).tagcount=[];
    [source(i).tag_source_count,source(i).tag_pix,source(i).tag_prx]=deal(zeros(size(source(i).tag,1),1));
    source(i).source_tag=zeros(circle/100,16);%每100个循环的时间步时，每个新闻上的标签数统计表初始化
    source(i).source_proportion=zeros(circle/100,16);%每100个循环的时间步时，每个新闻上的标签的被选择概率统计表初始化
end;
% 对标签赋权值并分类
tagslibrary='';
for i=1:newscount
    tagslibrary=unique(strvcat(tagslibrary,source(i).tagslib),'rows');%将所有文章中的关键词汇总
    %source(i).tagweight=zeros(length(source(i).tag),1);
end;
tag_tfidf_fre=zeros(newscount,length(tagslibrary));%建立tfidf二维表格计算权重
tag_tfidf_count=zeros(newscount,length(tagslibrary));
for i=1:newscount
    for j=1:size(source(i).tagslib,1)
          temp1=find((ismember(tagslibrary,source(i).tagslib(j,:),'rows'))');
          tag_tfidf_fre(i,temp1)=source(i).wordfre(j);%对应文章中对应关键词的词频
          tag_tfidf_count(i,temp1)=1;
    end;
end;
data0=TFIDF(tag_tfidf_fre',tag_tfidf_count);
data=data0';
for i=1:newscount
    for k=1:size(tagslibrary,1)
          temp2=find((ismember(source(i).tag,tagslibrary(k,:),'rows'))');
          source(i).tagweight(temp2)=data(i,k);%得到每个被选关键词的权重
	      temp3=find((ismember(source(i).tagslib,tagslibrary(k,:),'rows'))');
	      source(i).tagsweight(temp3)=data(i,k);%得到每篇文章中所有关键词的权重
    end;
    source(i).tagweight=source(i).tagweight';
    source(i).tagsweight=source(i).tagsweight';
end;
 weight = [];
 for i = 1:newscount
     weight = [weight ; source(i).tagsweight];
 end;
 ave_weight=mean(weight);%求所有标签权重的平均值
% 分四类标签
for i=1:newscount
    source(i).tag_highfre_highweight='';
    source(i).tag_highfre_lowweight='';
    source(i).tag_lowfre_highweight='';
    source(i).tag_lowfre_lowweight='';
     %对每篇文章的关键词按权值降序重新排序
%      sorted_tagsweight=unique(source(i).tagsweight);%将所有文章中的关键词汇总
%      mid_weight=median(sorted_tagsweight);    
%      ave_weight = mean(sorted_tagsweight);
%     %根据权重和词频来分成四组（词频：=1或者>1;权重：在对应文章的权重排序中在前一半或者后一半）
%      for j=1:size(source(i).tag,1)
%          if source(i).tagwordfre(j)>1 && source(i).tagweight(j)>=mid_weight
%              source(i).tag_highfre_highweight=strvcat(source(i).tag_highfre_highweight,source(i).tag(j,:));
%          end;
%          if source(i).tagwordfre(j)>1 && source(i).tagweight(j)<mid_weight
%              source(i).tag_highfre_lowweight=strvcat(source(i).tag_highfre_lowweight,source(i).tag(j,:));
%          end;
%          if source(i).tagwordfre(j)==1 && source(i).tagweight(j)>=mid_weight
%              source(i).tag_lowfre_highweight=strvcat(source(i).tag_lowfre_highweight,source(i).tag(j,:));
%          end;
%          if source(i).tagwordfre(j)==1 && source(i).tagweight(j)<mid_weight
%              source(i).tag_lowfre_lowweight=strvcat(source(i).tag_lowfre_lowweight,source(i).tag(j,:));
%           end;            
%      end;
     for j=1:size(source(i).tagslib,1)
          if source(i).wordfre(j)>1 && source(i).tagsweight(j)>=ave_weight
              source(i).tag_highfre_highweight=strvcat(source(i).tag_highfre_highweight,source(i).tagslib(j,:));
          end;
          if source(i).wordfre(j)>1 && source(i).tagsweight(j)<ave_weight
              source(i).tag_highfre_lowweight=strvcat(source(i).tag_highfre_lowweight,source(i).tagslib(j,:));
          end;
          if source(i).wordfre(j)==1 && source(i).tagsweight(j)>=ave_weight
              source(i).tag_lowfre_highweight=strvcat(source(i).tag_lowfre_highweight,source(i).tagslib(j,:));
          end;
          if source(i).wordfre(j)==1 && source(i).tagsweight(j)<ave_weight
              source(i).tag_lowfre_lowweight=strvcat(source(i).tag_lowfre_lowweight,source(i).tagslib(j,:));
           end;            
      end;
   %补充用户数据标签,上限补充10个新标签
    [~,row]=xlsread('E:\MATLAB\model\TagData\G20.xlsx','用户数据');
    content=char(row);
    fre=Word_frequency(content);
    field={'word','wordfre'};
    u_data=cell2struct(fre,field,2);
    add_usertag_count=0;
    source(i).usertag='';
    source(i).usertagfre=[];
    for k=1:size(u_data)
        if ismember(u_data(k).word,source(i).tagslib,'rows')==1
            if ismember(u_data(k).word,source(i).tag,'rows')==0 && add_usertag_count<10
                source(i).usertag=strvcat(source(i).usertag,u_data(k).word);
                temp4=find((ismember(source(i).tagslib,u_data(k).word,'rows'))');
                source(i).usertagfre=[source(i).usertagfre;source(i).wordfre(temp4)];
                add_usertag_count=add_usertag_count+1;
            end;
            if ismember(u_data(k).word,source(i).tag_highfre_lowweight,'rows')==1
                temp5=find((ismember(source(i).tag_highfre_lowweight,u_data(k).word,'rows'))');
                source(i).tag_highfre_lowweight(temp5,:)=[];
                source(i).tag_highfre_highweight=strvcat(source(i).tag_highfre_highweight,u_data(k).word);
            end;
            if ismember(u_data(k).word,source(i).tag_lowfre_lowweight,'rows')==1
                temp5=find((ismember(source(i).tag_lowfre_lowweight,u_data(k).word,'rows'))');
                source(i).tag_lowfre_lowweight(temp5,:)=[];
                source(i).tag_lowfre_highweight=strvcat(source(i).tag_lowfre_highweight,u_data(k).word);
            end;
        end;
    end;
    source(i).valuabletag = strvcat(source(i).tag_highfre_highweight,source(i).tag_lowfre_highweight);
end;
% 随机加标签（随机选择标签，涵盖词频高和词频低）
for a=1:circle
%     %统计各个新闻上标签的使用次数占该新闻被标注次数的占比分布（100次为一个步长）
%        if rem(a,100)==0%取余函数，一个时间步到达
%            i=a/100;
%            for j=1:newscount
%                sourcetag(i,j)=sum(source(j).tagcount);
%                for k=1:16
%                    if k<=length(source(j).tagcount)
%                        source(j).source_tag(i,k)=source(j).tagcount(k);
%                        source(j).source_proportion(i,k)=source(j).tagcount(k)/sourcetag(i,j);
%                    end;
%                end;
%            end;
%        end;
%随机选取资源
source_num=randi(newscount);
if isempty(source(source_num).tag)==1
    %给从未标注过的媒资加标签
    tag_num=randi(size(source(source_num).valuabletag,1));
    source(source_num).tag=strvcat(source(source_num).tag,source(source_num).valuabletag(tag_num,:));
%     source(source_num).tagwordfre=[source(source_num).tagwordfre;source(source_num).wordfre(tag_num)];
    source(source_num).tagcount=1;
    source(source_num).count_tag=source(source_num).count_tag+1;
else
    %给标注过的媒资加标签     
    p_o=0.8;
    u=0.8;
  %旧媒资加旧标签
    if randi(100)/100<p_o
         while 1
             chosed_tag=randi(size(source(source_num).tag,1));
             tag_p=u*source(source_num).tag_pix(chosed_tag)+(1-u)*p_o*source(source_num).tag_prx(chosed_tag);%特定标签被选择概率计算
             if tag_p>=0.1
                 source(source_num).tagcount(chosed_tag)=source(source_num).tagcount(chosed_tag)+1;
                 source(source_num).count_tag=source(source_num).count_tag+1;
                 break;
             end;
         end;
  %旧媒资加新标签
    else
        tag_num=randi(size(source(source_num).valuabletag,1));
        if ismember(source(source_num).tag,source(source_num).valuabletag(tag_num,:),'rows')==0
            source(source_num).tag=strvcat(source(source_num).tag,source(source_num).valuabletag(tag_num,:));
%             source(source_num).tagwordfre=[source(source_num).tagwordfre;source(source_num).wordfre(tag_num)];
            source(source_num).tagcount=[source(source_num).tagcount;1];
            source(source_num).count_tag=source(source_num).count_tag+1;
        end;
    end;
 end;
%更新tag_source_count，表示标签标引资源数
     for i=1:newscount
         [source(i).tag_source_count,source(i).tag_pix,source(i).tag_prx]=deal(zeros(size(source(i).tag,1),1));
     end;   
     for i1=1:newscount
         for l=1:size(source(i1).tag,1) 
             for i3=1:newscount
                     if ismember(source(i1).tag(l,:),source(i3).tag,'rows')==1
                         source(i1).tag_source_count(l)=source(i1).tag_source_count(l)+1;
                     end;
             end;    
         end;
     end;
    %更新tags_Ri、tag_Ri、tag_pix、tags_pix
       for i=1:newscount
          source(i).tag_Ri=0;
      end;
        for i1=1:newscount
           for l=1:size(source(i1).tag,1)
               source(i1).tag_Ri=source(i1).tag_Ri+source(i1).tagcount(l);
               if source(i1).tag_source_count(l)==0
                   source(i1).tag_pix(l)=0;
               else
                   source(i1).tag_pix(l)=1/source(i1).tag_source_count(l);
               end;
           end;
       end;
       %更新tags_prx、tag_prx
       for i1=1:newscount
           for l=1:size(source(i1).tag,1)
               source(i1).tag_prx(l)=source(i1).tagcount(l)/source(i1).tag_Ri;
           end;
       end;
end;

%补充准确率tag_precision、召回率tag_recall、F1
for i=1:newscount
    source(i).tag_groupcount=zeros(size(source(i).tag,1),1);
    source(i).tag_newscount=zeros(size(source(i).tag,1),1);
    for j=1:size(source(i).tag,1)
        for k=1:newscount
            if ismember(source(i).tag(j,:),source(k).tag,'rows')==1
                source(i).tag_groupcount(j)=source(i).tag_groupcount(j)+1;
            end;
            if ismember(source(i).tag(j,:),source(k).tagslib,'rows')==1
                source(i).tag_newscount(j)=source(i).tag_newscount(j)+1;
            end;
        end;
    end;
    source(i).tag_recall=source(i).tag_groupcount./source(i).tag_newscount;
    source(i).tag_precision=1;
    source(i).tag_F1=source(i).tag_recall.*source(i).tag_precision*2./(source(i).tag_recall+source(i).tag_precision);
    source(i).tag_recall_F1 = [source(i).tag_recall,source(i).tag_F1];
    x1=1:size(source(i).tag,1);
    figure;%绘制不同新闻的标签的召回率和准确率以及F1
    bar(x1,source(i).tag_recall');
    title(sprintf('第%d篇新闻各标签的召回率',i));
    xlabel('标签内容');
    ylabel('召回率');
    figure;%绘制不同新闻的标签的召回率和准确率以及F1
    fx = bar(x1,source(i).tag_recall_F1);
    grid on;
    color = get(fx,'children');
    set(fx(1), 'FaceColor',[1 0 0]);% Pink
    set(fx(2), 'FaceColor',[0 0 1]); % Green
    title(sprintf('第%d篇新闻各标签的召回率、F1值分布',i));
    xlabel('标签内容');
    ylabel('召回率、F1值');
    legend('召回率','F1值');
    grid off;
%     source(i).tag_recall=source(i).tag_groupcount./source(i).tag_newscount;
%     source(i).tag_precision=source(i).tag_groupcount./newscount;
%     source(i).tag_F1=source(i).tag_recall.*source(i).tag_precision*2./(source(i).tag_recall+source(i).tag_precision);
%     x1=1:size(source(i).tag,1);
%     figure(i);%绘制不同新闻的标签的召回率和准确率以及F1
%     plot(x1,source(i).tag_recall','s-',x1,source(i).tag_precision','o-',x1,source(i).tag_F1','d-');
%     title(sprintf('第%d篇新闻各标签的召回率、准确率、F1值分布',i));
%     xlabel('标签内容');
%     ylabel('召回率、准确率、F1值');
%     legend('召回率','准确率','F1值',-1);
end;
%统计整个话题的标签topic_tag
topic_tagset='';
for i=1:newscount
    topic_tagset=strvcat(topic_tagset,source(i).tag);
end;
[topic_tag,~,~]=unique(topic_tagset,'rows');%可能会概括整个话题的标签分布及话题内容，topic_tag表示话题标签集合的一个标签，按行取
topic_tagfre=[];
for i=1:size(topic_tag,1)
    b=sum(ismember(topic_tagset,topic_tag(i,:),'rows'));
    topic_tagfre = [topic_tagfre;b];
end;
x2=1:size(topic_tag,1);
figure;%绘制话题标签集合中的不同标签的频数
bar(x2,topic_tagfre');
title('杭州G20峰会的所有新闻标签频数统计');
xlabel('标签内容');
ylabel('标签频数');
