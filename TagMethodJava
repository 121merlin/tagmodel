package com.java.tagmethod2;

//导入工具包
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

class Topic {
	private String topic ;
	private int newsCount ;
	private LinkedList<News> news ;//一个话题包含多条新闻
	private ArrayList<String> tags ;//一个话题的标签集合
	public void setTopic(String topic) {
		this.topic = topic ;
	}
	public void setNewsCount(int newsCount) {
		this.newsCount = newsCount ;
	}
	public void setNews(LinkedList<News> newslist) {
		this.news = newslist ;
	}
	public void setTags() {
		ArrayList<String> alltopictags = new ArrayList<String>() ;
		for (int i = 0; i < newsCount; i++) {
			for (int j = 0; j < news.get(i).allTags().size(); j++) {
				alltopictags.add(news.get(i).allTags().get(j));
			}
		}
		this.tags = alltopictags ;
	}
	public Topic(String topic,int newsCount) {
		this.topic = topic ;
		this.newsCount = newsCount ;
	}
	public LinkedList<News> getNews() {
		return this.news ;
	}
	public ArrayList<String> getTags() {
		return this.tags ; 
	}
	public String getTopic() {
		return this.topic;
	}
	public int getNewsCount() {
		return this.newsCount ;
	}
	public void printTopic() {
		System.out.println("话题：" + this.topic + "; 新闻数：" + this.newsCount);
	}
}
class News {
	private String title ;
	private String content ;
	private int tag_Ri = 0;
	private Topic topic ;//新闻所属话题
	private Map<String, Integer> taglib_fre ;
	private ArrayList<Tag> tags ;
	private ArrayList<UserTag> userTags ;
	private Map<String,Double> taglib_wei ;
	public void setTaglib_wei(Map<String, Double> taglib_wei) {
		this.taglib_wei = taglib_wei ;
	}
	public void setTag_Ri(int tag_Ri) {
		this.tag_Ri = tag_Ri ;
	}
	public void setTags(ArrayList<Tag> tags) {
		this.tags = tags ;
	}
	public void setUsertags(ArrayList<UserTag> userTags) {
		this.userTags = userTags ;
	}
	public void setTaglib(Map<String, Integer> taglib_fre) {
		this.taglib_fre = taglib_fre ;
	}
	public void setTitle(String title) {
		this.title = title ;
	}
	public void setContent(String content) {
		this.content = content ;
	}
	public void setTopic(Topic topic) {
		this.topic = topic ;
	}
	public News(String title,String content) {
		this.title = title ;
		this.content = content ;
	}
	public int getTag_Ri() {
		return this.tag_Ri ;
	}
	public Topic getTopic() {
		return this.topic ;
	}
	public String getTitle() {
		return this.title;
	}
	public String getContent() {
		return this.content ;
	}
	public Map<String, Integer> getTaglib() {
		return this.taglib_fre;
	}
	public Map<String, Double> getTaglib_wei() {
		return this.taglib_wei ;
	}
	public ArrayList<UserTag> getUserTags() {
		return this.userTags ;
	}
	public ArrayList<Tag> getTags() {
		return this.tags;
	}
	public void printNews(){
		System.out.println("\t新闻标题：" + this.title);
		System.out.println("\t新闻内容：" + this.content);
		System.out.println("\t新闻标签库：" + this.taglib_fre);
		System.out.println("\t标签库词量：" + this.taglib_fre.size());
		System.out.println("\t标签：" + this.tags);
		System.out.println();
	}
	public ArrayList<String> allTags() {
		ArrayList<String> alltags = new ArrayList<String>() ;
		for (int i = 0; i < userTags.size(); i++) {
			alltags.add(userTags.get(i).getTag());
		}
		for (int i = 0; i < tags.size(); i++) {
			alltags.add(tags.get(i).getTag());
		}
		return alltags ;
	}
	public void tag_precision_recall_F1() {
		Set<String> alltaglib = this.taglib_fre.keySet();
		for (int i = 0; i < this.allTags().size(); i++) {
			for (int j = 0; j < this.topic.getNewsCount(); j++) {
				if (this.topic.getNews().get(j).allTags().contains(this.allTags().get(i))) {
					if (i<userTags.size()) {
						int tempgroupcount = this.userTags.get(i).getTag_groupcount();
						this.userTags.get(i).setTag_groupcount(tempgroupcount+1);
					}
					else {
						int tempindex = i-userTags.size() ;
						int tempgroupcount = this.tags.get(tempindex).getTag_groupcount() ;
						this.tags.get(tempindex).setTag_groupcount(tempgroupcount+1);
					}
				}
				if (alltaglib.contains(this.allTags().get(i))) {
					if (i<userTags.size()) {
						int tempnewscount = this.userTags.get(i).getTag_newscount();
						this.userTags.get(i).setTag_newscount(tempnewscount+1);
					}
					else {
						int tempindex = i-userTags.size() ;
						int tempnewscount = this.tags.get(tempindex).getTag_newscount() ;
						this.tags.get(tempindex).setTag_newscount(tempnewscount+1);
					}
				}
			}
		}
		for (int i = 0; i < this.allTags().size(); i++) {
			if (i<userTags.size()) {
				this.userTags.get(i).setTag_recall
				(this.userTags.get(i).getTag_groupcount()/this.userTags.get(i).getTag_newscount());
				this.userTags.get(i).setTag_precision
				(this.userTags.get(i).getTag_groupcount()/this.getTopic().getNewsCount());
				this.userTags.get(i).setF1
				(this.userTags.get(i).getTag_recall()*this.userTags.get(i).getTag_precision()*2
						/(this.userTags.get(i).getTag_recall()+this.userTags.get(i).getTag_precision()));
			}
			else {
				int tempindex = i-userTags.size() ;
				this.userTags.get(tempindex).setTag_recall
				(this.userTags.get(tempindex).getTag_groupcount()/this.userTags.get(tempindex).getTag_newscount());
				this.userTags.get(tempindex).setTag_precision
				(this.userTags.get(tempindex).getTag_groupcount()/this.getTopic().getNewsCount());
				this.userTags.get(tempindex).setF1
				(this.userTags.get(tempindex).getTag_recall()*this.userTags.get(tempindex).getTag_precision()*2
						/(this.userTags.get(tempindex).getTag_recall()+this.userTags.get(tempindex).getTag_precision()));

			}
		}
	}
}
class UserTag{
	private String tag ; 
	private int tagfre ;
	private int tagsorted; 
	private double tag_precision ;//准确率
	private double tag_recall ;//召回率
	private double F1 ;//F1
	private int tag_groupcount = 0;
	private int tag_newscount = 0;
	public void setTag(String tag) {
		this.tag = tag ; 
	}
	public void setTagfre(int tagfre) {
		this.tagfre = tagfre ;
	}
	public void setTagsorted(int tagsorted) {
		this.tagsorted = tagsorted ;
	}
	public void setTag_precision(double tag_precision) {
		this.tag_precision = tag_precision ;
	}
	public void setTag_recall(double tag_recall) {
		this.tag_recall = tag_recall ;
	}
	public void setF1(double F1) {
		this.F1 = F1 ;
	}
	public void setTag_groupcount(int tag_groupcount) {
		this.tag_groupcount = tag_groupcount ;
	}
	public void setTag_newscount(int tag_newscount) {
		this.tag_newscount = tag_newscount ;
	}
	public String getTag() {
		return this.tag ; 
	}
	public int getTagfre() {
		return this.tagfre ;
	}
	public int getTagsorted() {
		return this.tagsorted ;
	}
	public double getTag_precision() {
		return this.tag_precision ;
	}
	public double getTag_recall() {
		return this.tag_recall ;
	}
	public double getF1() {
		return this.F1 ;
	}
	public int getTag_groupcount() {
		return this.tag_groupcount ;
	}
	public int getTag_newscount() {
		return this.tag_newscount ;
	}
}
class Tag {
	private String tag ;
	private int tagsorted = 0 ;//表示标签组中的标签分类：1，高频高价值；2，低频高价值；3，高频低价值；4，低频低价值
	private int tagfre ;
	private double tagweight ;
	private int tag_source_count = 0;
	private int tagcount = 0;
	private double tag_pix ;
	private double tag_prx ; 
	private double tag_precision ;//准确率
	private double tag_recall ;//召回率
	private double F1 ;//F1
	private int tag_groupcount = 0;
	private int tag_newscount = 0;
	private Topic topic ;//标签组所属话题
	private News news ;//标签组所属新闻
	public void setTag_precision(double tag_precision) {
		this.tag_precision = tag_precision ;
	}
	public void setTag_recall(double tag_recall) {
		this.tag_recall = tag_recall ;
	}
	public void setF1(double F1) {
		this.F1 = F1 ;
	}
	public void setTag_groupcount(int tag_groupcount) {
		this.tag_groupcount = tag_groupcount ;
	}
	public void setTag_newscount(int tag_newscount) {
		this.tag_newscount = tag_newscount ;
	}
	public void setTagfre(int tagfre) {
		this.tagfre = tagfre ;
	}
	public void setTagweight(double tagweight) {
		this.tagweight = tagweight ;
	}
	public void setTag_source_count(int tag_source_count) {
		this.tag_source_count = tag_source_count ;
	}
	public void setTagcount(int tagcount) {
		this.tagcount = tagcount ;
	}
	public void setTag_pix(double tag_pix) {
		this.tag_pix = tag_pix ;
	}
	public void setTag_prx(double tag_prx) {
		this.tag_prx = tag_prx ;
	}
	public void setTag(String tag) {
		this.tag = tag ;
	}
	public void setTagSorted(int tagsorted) {
		this.tagsorted = tagsorted ;
	}
	public void setTopic(Topic topic) {
		this.topic = topic ;
	}
	public void setNews(News news) {
		this.news = news ;
	}
	public int getTagfre() {
		return this.tagfre ;
	}
	public double getTagweight() {
		return this.tagweight ;
	}
	public int getTag_source_count() {
		return this.tag_source_count ;
	}
	public int getTagcount() {
		return this.tagcount ;
	}
	public double getTag_pix() {
		return this.tag_pix ;
	}
	public double getTag_prx() {
		return this.tag_prx ;
	}
	public Topic getTopic() {
		return this.topic ;
	}
	public News getNews() {
		return this.news ;
	}
	public String getTag(){
		return this.tag;
	}
	public int getTagSorted() {
		return this.tagsorted;
	}
	public double getTag_precision() {
		return this.tag_precision ;
	}
	public double getTag_recall() {
		return this.tag_recall ;
	}
	public double getF1() {
		return this.F1 ;
	}
	public int getTag_groupcount() {
		return this.tag_groupcount ;
	}
	public int getTag_newscount() {
		return this.tag_newscount ;
	}
	public void print() {
		System.out.println("标签：" + this.tag + "; 标签组类别：" + this.tagsorted);
	}
    //补充准确率tag_precision、召回率tag_recall、F1
	
}
public class TagMethod2 {
	private static final String DBDRIVER = "com.mysql.jdbc.Driver" ;
	private static final String DB_URL = "jdbc:mysql://localhost:3306/tagdata" ;
	private static final String USER = "root" ;
	private static final String PASSWORD = "123456" ;

	public static void main(String[] args) throws Exception {
		//一、加载数据库驱动
		Class.forName(DBDRIVER) ;
		//二、连接数据库
		Connection connection = DriverManager.getConnection(DB_URL,USER,PASSWORD) ;
		//三、数据库操作
		//查询数据
        //读取表news中的新闻数据，建立News对象
        PreparedStatement ps = connection.prepareStatement("select * from news where topic=?");
        ps.setString(1, "杭州G20");
        ResultSet rs = ps.executeQuery() ;
        int count = rs.getRow() ;//获得该话题下的新闻数
        LinkedList<News> newslist = new LinkedList<News>() ;
        while(rs.next()){
        	//建立新闻链表
            News news = new News(rs.getString(2),rs.getString(3));
            newslist.add(news);
            //新建标签组tag
            ArrayList<Tag> tagList = new ArrayList<Tag>() ;
            news.setTags(tagList);
            }
        //读取表topics中的话题数据，建立话题对象
      	ps=connection.prepareStatement("select * from topics");
        rs = ps.executeQuery();
        ArrayList<Topic> topiclist = new ArrayList<Topic>() ;
        while(rs.next()){
        //建立话题链表
        Topic topic = new Topic(rs.getString(1), rs.getInt(2)) ;
        topiclist.add(topic) ;
        }
        for (int i = 0; i < newslist.size(); i++) {
			newslist.get(i).setTopic(topiclist.get(2));
		}
        topiclist.get(2).setNews(newslist);
        
        //获取taglib数据
        ps=connection.prepareStatement("select * from taglib where topic=? and title=?");
        ps.setString(1, topiclist.get(2).getTopic());
        for (int i = 0; i < topiclist.get(2).getNews().size(); i++) {
			ps.setString(2, topiclist.get(2).getNews().get(i).getTitle());
			rs = ps.executeQuery();
	        Map<String, Integer> tag_map= new HashMap<String,Integer>() ;
	        while(rs.next()){
	        //建立话题链表
	        	String n_keyword = rs.getString(3);
	        	int n_wordfre = rs.getInt(4);
	        	tag_map.put(n_keyword, n_wordfre);
	        }
	        topiclist.get(2).getNews().get(i).setTaglib(sortMap(tag_map));
		}
        
        //随机加标签
        int circle = 2000 ;
        int news_count = topiclist.get(2).getNewsCount() ;
        LinkedList<News> chosedtopic_newslist = topiclist.get(2).getNews() ;
        for (int i = 0; i < circle; i++) {
        	
//			if (i%100 == 0) {//100次循环是一个时间步
//				
//			}
        	//随机选取新闻
        	int news_num = (int)(Math.random()*news_count) ;
        	//将所选中的新闻的taglib的键单独提出来定义一个maptag,便于索引
        	Map<Integer, String> maptag = new HashMap<Integer,String>() ;
        	Map<String, Integer> temptaglib = chosedtopic_newslist.get(news_num).getTaglib();
        	ArrayList<Tag> chosednews_taglist = chosedtopic_newslist.get(news_num).getTags() ;
        	int temp1 = temptaglib.size() - 1 ;
        	for(Map.Entry<String, Integer> entry : temptaglib.entrySet()) {
        		maptag.put(temp1, entry.getKey());
        		temp1-- ;
        	}
        	if (chosednews_taglist.size()==0) {//该新闻从未标注过，随机选取一个标签
        		int tag_num1 = (int)(Math.random()*maptag.size());
        		Tag tag1 = new Tag() ;
        		tag1.setTag(maptag.get(tag_num1)) ;
        		tag1.setTagfre(temptaglib.get(maptag.get(tag_num1)));
        		tag1.setTagcount(1);
        		chosednews_taglist.add(tag1);
        		chosedtopic_newslist.get(news_num).setTags(chosednews_taglist);
			}
        	else{//标注过的新闻加标签
        		double p_o = 0.8 ;
        		double u = 0.8 ;
        		//加旧标签
        		if ((Math.random()*100/100)<p_o) {
					while (true) {
						int chosed_tag = (int)(Math.random()*(chosednews_taglist.size()));
						double tag_p = u*chosednews_taglist.get(chosed_tag).getTag_pix() 
								+ (1-u)*p_o*chosednews_taglist.get(chosed_tag).getTag_prx();
						if (tag_p >= 0.1) {
							chosednews_taglist.get(chosed_tag).setTagcount(chosednews_taglist.get(chosed_tag).getTagcount()+1);
							break ;
						}
					}
				}
        		//加新标签
        		else {
            		ArrayList<String> tagword = new ArrayList<String>();
            		for (int l = 0; l < chosednews_taglist.size(); l++) {
						tagword.add(chosednews_taglist.get(l).getTag());
					}
            		int tag_num2 = (int)(Math.random()*maptag.size());
        			while (tagword.contains(maptag.get(tag_num2)) == false ) {
        				Tag tag2 = new Tag() ;
                		tag2.setTag(maptag.get(tag_num2)) ;
                		tag2.setTagfre(temptaglib.get(maptag.get(tag_num2)));
                		tag2.setTagcount(1);
                		chosednews_taglist.add(tag2);
                		chosedtopic_newslist.get(news_num).setTags(chosednews_taglist);
                		break;
					}
				}
        	}
        	//更新tag_source_count，表示标签标引资源数
        	for (int j = 0; j < news_count; j++) {
				for (int k = 0; k < chosedtopic_newslist.get(j).getTags().size(); k++) {
					for (int l = 0; l < news_count; l++) {
						ArrayList<String> tagword = new ArrayList<String>();
	            		for (int m = 0; m < chosedtopic_newslist.get(l).getTags().size(); m++) {
							tagword.add(chosedtopic_newslist.get(l).getTags().get(m).getTag());
						}
						if (tagword.contains(chosedtopic_newslist.get(j).getTags().get(k).getTag())) {
							chosedtopic_newslist.get(j).getTags().get(k).setTag_source_count
							(chosedtopic_newslist.get(j).getTags().get(k).getTag_source_count()+1);
						}
					}
				}
			}
        	//更新tag_Ri、tag_pix、tag_prx
        	for (int j = 0; j < news_count; j++) {
				chosedtopic_newslist.get(j).setTag_Ri(0);
			}
        	for (int j = 0; j < news_count; j++) {
				for (int k = 0; k< chosedtopic_newslist.get(j).getTags().size(); k++) {
					chosedtopic_newslist.get(j).setTag_Ri
					(chosedtopic_newslist.get(j).getTag_Ri()+chosedtopic_newslist.get(j).getTags().get(k).getTagcount());
					if (chosedtopic_newslist.get(j).getTags().get(k).getTag_source_count() == 0) {
						chosedtopic_newslist.get(j).getTags().get(k).setTag_pix(0);
					}
					else {
						chosedtopic_newslist.get(j).getTags().get(k).setTag_pix
						(1/chosedtopic_newslist.get(j).getTags().get(k).getTag_source_count());
					}
				}
			}
        	for (int j = 0; j < news_count; j++) {
				for (int k = 0; k< chosedtopic_newslist.get(j).getTags().size(); k++) {
					chosedtopic_newslist.get(j).getTags().get(k).setTag_prx
					(chosedtopic_newslist.get(j).getTags().get(k).getTagcount()/chosedtopic_newslist.get(j).getTag_Ri());
				}
			}
		}
        topiclist.get(2).setNews(chosedtopic_newslist);
        //输出
        for (int j = 0; j < topiclist.size(); j++) {
        	topiclist.get(j).printTopic();
        	if (topiclist.get(j).getNews() != null) {
        		for (int k = 0; k < topiclist.get(j).getNews().size(); k++) {
    				topiclist.get(j).getNews().get(k).printNews();
    			}
			}
        	System.out.println();
      	}
        //对随机标注的标签利用（TF-IDF）附权值，按照权值高低排序
        //获得选中话题的所有标签库
        ps=connection.prepareStatement("select * from taglib where topic=?");
        ps.setString(1, topiclist.get(2).getTopic());
        rs = ps.executeQuery();
	    ArrayList<String> templist= new ArrayList<String>() ;
	    while(rs.next()){
	       	templist.add(rs.getString(3));
	    }
	    HashSet<String> set = new HashSet<String>(templist) ;
	    ArrayList<String> topic_taglib = new ArrayList<String>(set) ;
	    double[][] tag_tfidffre = new double[topic_taglib.size()][news_count];
	    for (int i = 0; i < news_count; i++) {
			for (int j = 0; j < topiclist.get(2).getNews().get(i).getTaglib().size(); j++) {
				Map<Integer, String> maptag = new HashMap<Integer,String>() ;
	        	Map<String, Integer> temptaglib = topiclist.get(2).getNews().get(i).getTaglib();
	        	int temp3 = topiclist.get(2).getNews().get(i).getTaglib().size() - 1 ;
	        	for(Map.Entry<String, Integer> entry : temptaglib.entrySet()) {
	        		maptag.put(temp3, entry.getKey());
	        		temp3-- ;
	        	}
	        	int temp4 = topic_taglib.indexOf(maptag.get(j));
	        	tag_tfidffre[temp4][i] = temptaglib.get(maptag.get(j));
			}
		}
	    double[][] tag_tfidfweight = TFIDF(tag_tfidffre);
	    for (int i = 0; i < news_count; i++) {
	    	Map<String, Double> temptaglibwei = new HashMap<String,Double>();
			Set<String> stringSet = topiclist.get(2).getNews().get(i).getTaglib().keySet();
			for (int j = 0; j < topic_taglib.size(); j++) {
				int temp3 = topiclist.get(2).getNews().get(i).getTags().indexOf(topic_taglib.get(j));
				topiclist.get(2).getNews().get(i).getTags().get(temp3).setTagweight(tag_tfidfweight[j][i]);//得到每个被选关键词的权重
				for(String str : stringSet){
					temptaglibwei.put(str, tag_tfidfweight[topic_taglib.indexOf(str)][i]);
				}
			}
			topiclist.get(2).getNews().get(i).setTaglib_wei(temptaglibwei);//得到每篇文章中所有关键词的权重
		}
	    //分四类标签
	    double midweight = getMiddle(tag_tfidfweight);
	  //补充用户数据
	    ps=connection.prepareStatement("select * from userdata where topic=?");
        ps.setString(1, topiclist.get(2).getTopic());
        rs = ps.executeQuery();
	    ArrayList<String> userdata= new ArrayList<String>() ;
	    while(rs.next()){
	       	userdata.add(rs.getString(2));
	    }
	    for (int i = 0; i < news_count; i++) {
			//对每篇文章的关键词按权值高低
	    	ArrayList<Tag> temptaglist = topiclist.get(2).getNews().get(i).getTags();
	    	for (int j = 0; j < temptaglist.size(); j++) {
				if (temptaglist.get(j).getTagfre()>1 && temptaglist.get(j).getTagweight()>=midweight) {
					temptaglist.get(j).setTagSorted(1);
				}
				else if (temptaglist.get(j).getTagfre()==1 && temptaglist.get(j).getTagweight()>=midweight) {
					temptaglist.get(j).setTagSorted(2);
				}
				else if (temptaglist.get(j).getTagfre()>1 && temptaglist.get(j).getTagweight()<midweight) {
					temptaglist.get(j).setTagSorted(3);
				}
				else{
					temptaglist.get(j).setTagSorted(4);
				}
			}
	    	Map<String, Integer> temptaglib = topiclist.get(2).getNews().get(i).getTaglib() ;
	    	Set<String> set2 = temptaglib.keySet() ;
	    	int add_usertag=0 ;
	    	ArrayList<UserTag> addUsertaglist = new ArrayList<UserTag>() ;
		    for (int j = 0; j < userdata.size(); j++) {
		    	
				if (set2.contains(userdata.get(j))){
					Set<String> set3 = new HashSet<String>();
					for (int j2 = 0; j2 < temptaglist.size(); j2++) {
						set3.add(temptaglist.get(j2).getTag()) ;
					}
					UserTag userTag = new UserTag() ;
					if ((set3.contains(userdata.get(j)) == false) && (add_usertag < 10)) {
						userTag.setTag(userdata.get(j));
						userTag.setTagfre(topiclist.get(2).getNews().get(i).getTaglib().get(userdata.get(j)));
						if (userTag.getTagfre()>1) {
							userTag.setTagsorted(1);
						}
						else {
							userTag.setTagsorted(2);
						}
						add_usertag++ ;
					}
					addUsertaglist.add(userTag);
					topiclist.get(2).getNews().get(i).setUsertags(addUsertaglist);
				}
			}
	    	topiclist.get(2).getNews().get(i).setTags(temptaglist);
		}

	    
/*		//删除数据
		PreparedStatement ps=connection.prepareStatement("delete from websites where name=?");
        ps.setString(1,"360");
        int len=ps.executeUpdate();
        System.out.println("影响行数" + len) ;*/
/*		//修改数据
		PreparedStatement ps=connection.prepareStatement("update websites set url=?,country=?,alexa=?  where name=?");
        ps.setString(1,"www.360.com.cn");
        ps.setString(2, "chn");
        ps.setInt(3,3);
        ps.setString(4,"360");
        int len = ps.executeUpdate();
        System.out.println("影响行数" + len) ;*/
/*		//插入数据
		PreparedStatement ps=connection.prepareStatement(" INSERT INTO websites (name, url, country, alexa) VALUES (?,?,?,?)");
		String name = "360" ;
		String url = "www.360.com" ;
		int alexa = 10 ;
		String country = "CHN" ;
		ps.setString(1, name) ;
		ps.setString(2, url) ;
		ps.setString(3, country) ;
		ps.setInt(4, alexa) ;
        int len = ps.executeUpdate();
        System.out.println("影响行数" + len) ;*/
		connection.close();
	} 
	//对tag_map进行排序，按词频降序排列
	public static Map<String, Integer> sortMap(Map<String, Integer> map) {
		// 通过ArrayList构造函数把map.entrySet()转换成list
		List<Map.Entry<String, Integer>> arrayList = new ArrayList<Map.Entry<String, Integer>>(map.entrySet());        // 通过比较器实现比较排序
        Collections.sort(arrayList, new Comparator<Map.Entry<String, Integer>>() {  
            public int compare(Map.Entry<String, Integer> map1,  
                        Map.Entry<String, Integer> map2) {  
                return (map2.getValue().compareTo(map1.getValue()));  
            }  
        });  
        Iterator<Map.Entry<String, Integer>> iter = arrayList.iterator();  
        Map.Entry<String, Integer> tmpEntry = null;  
        Map<String, Integer> sortedmap = new LinkedHashMap<String,Integer>() ;
        while (iter.hasNext()) {  
            tmpEntry = iter.next();  
            sortedmap.put(tmpEntry.getKey(), tmpEntry.getValue());  
        }  
		return sortedmap;
	}
	public static double[][] TFIDF(double[][] data) {//计算TFIDF权值
		int m = data.length ;
		int n = data[0].length ;
		double[][] dataMade = new double[m][n];
		double[] mSum = new double[m];//行求和
		double[] nSum = new double[n];//列求和
		for (int i = 0; i < m; i++) {
			mSum[i] = 0 ;
			for (int j = 0; j < n; j++) {
				mSum[i] = data[i][j] + mSum[i] ; 
			}
		}
		for (int i = 0; i < n; i++) {
			nSum[i] = 0 ;
			for (int j = 0; j < m; j++) {
				nSum[i] = data[i][j] + nSum[i] ; 
			}
		}
		for (int i = 0; i < m; i++) {
			double tempidf = (Math.log(n/nSum[i]))/(Math.log(2)) ;
			for (int j = 0; j < n; j++) {
				dataMade[i][j] = data[i][j]/mSum[j]*tempidf ;
			}
		}
		return dataMade ;
	}
	public static double getMiddle(double[][] data) {
		double[] temp;
		int len = 0;
		for (double[] element : data) {
			len += element.length;
		}
		temp = new double[len];
		int index = 0 ;
		for(double[] element : data){
			for(double element2 : element){
				temp[index++] = element2 ;
			}
		}
		Arrays.sort(temp);
		return temp[temp.length/2];
	}
}
